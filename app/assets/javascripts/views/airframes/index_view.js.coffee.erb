Jetdeck.Views.Airframes ||= {}

class Jetdeck.Views.Airframes.IndexView extends Backbone.View
  template: JST["templates/airframes/index"]

  initialize: ->
    @options.airframes.bind('reset', @addAll)
    
  events : 
    "click a.next" : "next"
    "click a.prev" : "prev"
    "click a.page" : "page"
    "click .sort" : "sort"
  
  sort : (event) ->
    # capture the click and get the parameters
    e = event.target || event.currentTarget
    sort = $(e).data('sort')  
    direction = $(e).data('dir')  
    
    # perform the sort
    @options.airframes.orderBy(sort)
    @options.airframes.direction(direction)
    @options.airframes.sort()  
    
    # set the sort button styles
    @$('.sort').parent("li").removeClass('active')
    @$(e).parent("li").addClass('active')
    @$(".sort_dir_icon").remove()
    if direction == "asc"
        @$(e).append("<i class='icon-chevron-down icon-white sort_dir_icon'></i>")    
    if direction == "desc"
        @$(e).append("<i class='icon-chevron-up icon-white sort_dir_icon'></i>")  
           
    # toggle sort button direction
    $(e).data('dir', 'desc') if direction == "asc"
    $(e).data('dir', 'asc') if direction == "desc"    
        
    # go back to first page  
    @options.airframes.turnTo(1)
    @addAll()
    @$('a.page').parent('li').removeClass('active')
    @$('.page[rel=1]').parent('li').addClass('active')
    
  page : (event) ->
    e = event.target || event.currentTarget
    n = $(e).attr('rel')
    @options.airframes.turnTo(n)
    @addAll()
    @$('a.page').parent('li').removeClass('active')
    $(e).parent('li').addClass('active')
    
  next : ->
    @options.airframes.next()
    @addAll()
    @$('a.page').parent('li').removeClass('active')
    p = @options.airframes.currentPage()
    @$('.page[rel='+p+']').parent('li').addClass('active')    

  prev : ->
    @options.airframes.prev()
    @addAll()
    @$('a.page').parent('li').removeClass('active')
    p = @options.airframes.currentPage()
    @$('.page[rel='+p+']').parent('li').addClass('active')    

  addAll: =>
    @clear()
    @options.airframes.eachOnPage(@addOne)

  clear : ->
    @$("#airframes").html('')
    
  addOne: (airframe) => 
    if airframe
        view = new Jetdeck.Views.Airframes.AirframeView({model : airframe})
        @$("#airframes").append(view.render().el)

  render: =>
    if @options.airframes.length < 1
        empty_view = new Jetdeck.Views.Airframes.IndexEmptyView()
        $(@el).html(empty_view.render().el)
    else
        params =
            count : @options.airframes.length
            pages : @options.airframes.pages()
            
        $(@el).html(@template(params))
        @addAll()    
        @$('.page[rel=1]').parent('li').addClass('active')   
    return this

class Jetdeck.Views.Airframes.IndexEmptyView extends Backbone.View
  template: JST["templates/airframes/index_empty"]

  events:
    "click #manual-create" : "manual"
    "click #import-button" : "import"

  import: =>

    @$("#import-error").hide()
    @$("#import-button").button("loading")

    $.post("/airframes/import", {
            url: @$("#import-url").val()
            authenticity_token: $("meta[name='csrf-token']").attr("content")
        }
    ).done( (a,b,c) ->
        window.location.href = a.airframe.link
    ).fail( (a,b,c) =>
        @$("#import-error").show()
        @$("#import-button").button("reset")
        @$("#import-error").html($.parseJSON(a.responseText).errors)
    )

  manual: (event) =>   
    # hold up, Turbo
    event.preventDefault()
    event.stopPropagation()

    # feedback
    $("#manual-create").button("loading")

    # make a collection to handle the http txn
    collection = new Jetdeck.Collections.AirframesCollection()
    collection.create(@model.toJSON(),
      success: (airframe) =>
        mixpanel.track("Created Airframe")
        window.location.href = "/airframes/#{airframe.id}"
      error: (airframe, jqXHR) =>
        errors = $.parseJSON(jqXHR.responseText)
        @$("#error-message").html(errors[0])
        $("#manual-create").button("reset")
    )

  render: =>
    $(@el).html(@template())

    @model = new Jetdeck.Models.AirframeModel()
    @$('#manual-form').backboneLink(@model)

    return this